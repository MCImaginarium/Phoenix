buildscript {
	repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
	maven {
            name 'minecraft'
            url 'https://libraries.minecraft.net/'
        }
    }
    dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		files('SForgeGradle-2.2-SNAPSHOT.jar')
		'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
//		classpath files('FGS.jar')
	}
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.patcher'
apply plugin: 'net.minecraftforge.gradle.launch4j'
apply plugin: 'maven'

group = 'djoveryde.phoenix'
version = '0.0.1'

//afterEvaluate {
//	patchPhoenixJar.addInject file('bukkit/src/main/java/')
//}

//tasks.whenTaskAdded	{ task ->
//	if(task.name.equals("genPhoenixPatches")) {
//		task.addOriginalSource file('bukkit/src/main/java/')
//	}
//}

dependencies {
	compile 'org.avaje:ebean:2.8.1'
	compile 'com.googlecode.json-simple:json-simple:1.1'
	compile 'org.yaml:snakeyaml:1.15'
	compile 'com.google.guava:guava:21.0'
        compile 'junit:junit:4.12'
        compile 'com.google.code.findbugs:jsr305:3.0.1'
        compile 'com.mojang:netty:1.6'
        compile 'oshi-project:oshi-core:1.1'
        compile 'net.java.dev.jna:jna:3.4.0'
        compile 'net.java.dev.jna:platform:3.4.0'
        compile 'com.ibm.icu:icu4j-core-mojang:51.2'
        compile 'net.sf.jopt-simple:jopt-simple:4.6'
        compile 'com.paulscode:codecjorbis:20101023'
        compile 'com.paulscode:codecwav:20101023'
        compile 'com.paulscode:libraryjavasound:20101123'
        compile 'com.paulscode:librarylwjglopenal:20100824'
        compile 'com.paulscode:soundsystem:20120107'
        compile 'io.netty:netty-all:4.0.23.Final'
        compile 'com.google.guava:guava:17.0'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        compile 'commons-io:commons-io:2.4'
        compile 'commons-codec:commons-codec:1.9'
        compile 'net.java.jinput:jinput:2.0.5'
        compile 'net.java.jutils:jutils:1.0.0'
        compile 'com.google.code.gson:gson:2.2.4'
        compile 'com.mojang:authlib:1.5.24'
        compile 'com.mojang:realms:1.10.16'
        compile 'org.apache.commons:commons-compress:1.8.1'
        compile 'org.apache.httpcomponents:httpclient:4.3.3'
        compile 'commons-logging:commons-logging:1.1.3'
        compile 'org.apache.httpcomponents:httpcore:4.3.2'
        compile 'it.unimi.dsi:fastutil:7.0.12_mojang'
        compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
        compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
        compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
        compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
        compile 'net.minecraft:launchwrapper:1.12'
        compile 'jline:jline:2.13'
        compile 'com.google.code.findbugs:jsr305:1.3.9'
        compile 'org.ow2.asm:asm-debug-all:5.0.3'
        compile 'com.typesafe.akka:akka-actor_2.11:2.3.3'
        compile 'com.typesafe:config:1.2.1'
        compile 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
        compile 'org.scala-lang:scala-compiler:2.11.1'
        compile 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
        compile 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2'
        compile 'org.scala-lang:scala-library:2.11.1'
        compile 'org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1'
        compile 'org.scala-lang:scala-reflect:2.11.1'
        compile 'org.scala-lang.modules:scala-swing_2.11:1.0.1'
        compile 'org.scala-lang.modules:scala-xml_2.11:1.0.2'
        compile 'lzma:lzma:0.0.1'
        compile 'java3d:vecmath:1.5.2'
        compile 'net.sf.trove4j:trove4j:3.0.3'
    }

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

minecraft {
    version = "1.11.2"
    mcpVersion = '9.37'
    mappings = 'snapshot_nodoc_20170612'
    workspaceDir = "projects"
    versionJson = "jsons/1.11.2-dev.json"
    buildUserdev = true
    buildInstaller = true
	installerVersion = '1.5'

    def common = {
        patchPrefixOriginal "../src-base/minecraft"
        patchPrefixChanged "../src-work/minecraft"
//        mainClassClient "net.minecraft.launchwrapper.Launch"
//        tweakClassClient "net.minecraftforge.fml.common.launcher.FMLTweaker"
        mainClassServer "net.minecraftforge.fml.relauncher.ServerLaunchWrapper"
        tweakClassServer "net.minecraftforge.fml.common.launcher.FMLTweaker"
    }

    projects {
        forge {
            rootDir "forge/"
            patchDir "forge/patches/minecraft/"
            patchAfter "clean"
            genPatchesFrom "clean"
            genMcpPatches = false
            applyMcpPatches = false
            s2sKeepImports = true
			//dchImports = true
			//ignoreWhiteSpaces = false
            with common
        }
		
		phoenix {
			rootDir "."
			patchDir "patches/"
            patchAfter "forge"
            genPatchesFrom "forge"
            genMcpPatches = true
            applyMcpPatches = true
            s2sKeepImports = true
			//dchImports = true
			//ignoreWhiteSpaces = false
            with common
		}
    }
}

installer {
    classifier = 'installer'
    from "forge/src/main/resources/forge_logo.png"
    rename "forge_logo\\.png", "big_logo.png"
}

launch4j {
    jar = installer.archivePath.canonicalPath
    outfile = file("build/distributions/${project.name}-${project.version}-installer-win.exe").canonicalPath
    icon = file('icon.ico').canonicalPath
    manifest = file('l4jManifest.xml').canonicalPath
    jreMinVersion = '1.6.0'
    initialHeapPercent = 5;
    maxHeapPercent = 100;
}
tasks.generateXmlConfig.dependsOn installer
tasks.build.dependsOn 'launch4j'
tasks.compileJava.enabled = false

task signUniversal(type: SignJar, dependsOn: 'outputJar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:];

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner;

    alias = 'forge'
    exclude "paulscode/**"
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = outputJar.archivePath
    outputFile = outputJar.archivePath
}
build.dependsOn signUniversal
installer.dependsOn signUniversal

outputJar {
    classifier = 'universal'
	
    manifest.attributes([
        "Main-Class": "net.minecraftforge.fml.relauncher.ServerLaunchWrapper",
        "TweakClass": "net.minecraftforge.fml.common.launcher.FMLTweaker",
        "Class-Path": getServerClasspath(file("jsons/1.11.2-rel.json"))
    ])
}

processJson {
    releaseJson = "jsons/1.11.2-rel.json"
    addReplacements([
        "@minecraft_version@": project.minecraft.version,
        "@version@": project.version,
        "@project@": "phoenix",
        "@artifact@": "djoveryde:phoenix:${project.version}",
        "@universal_jar@": { outputJar.archiveName },
        "@timestamp@": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

extractForgeSources { 
	exclude "**/SideOnly.java", "**/Side.java" 
}

genGradleProjects {
	addCompileDep "junit:junit:4.12"
}

import groovy.json.JsonSlurper;

String getServerClasspath(File file) {
    def node = new JsonSlurper().parse(file);
    def out = new StringBuilder()
    node.versionInfo.libraries.each { lib ->
        if (lib.serverreq)
        {
            // group : artifact : version
            def split = lib.name.split(':')
            def group = split[0].replace('.', '/')
            def artifact = split[1]
            def version = split[2]
            out += "libraries/$group/$artifact/$version/$artifact-${version}.jar "
        }
    }
    out += "minecraft_server.${minecraft.version}.jar"
    return out.toString();
}
